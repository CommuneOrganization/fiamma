// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fiamma/zkpverify/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgSubmitProof is the proof verify verification request type.
type MsgSubmitProof struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ProofSystem string `protobuf:"bytes,2,opt,name=proof_system,json=proofSystem,proto3" json:"proof_system,omitempty"`
	Proof       []byte `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	PublicInput []byte `protobuf:"bytes,4,opt,name=public_input,json=publicInput,proto3" json:"public_input,omitempty"`
	Vk          []byte `protobuf:"bytes,5,opt,name=vk,proto3" json:"vk,omitempty"`
	Namespace   string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *MsgSubmitProof) Reset()         { *m = MsgSubmitProof{} }
func (m *MsgSubmitProof) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProof) ProtoMessage()    {}
func (*MsgSubmitProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{2}
}
func (m *MsgSubmitProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProof.Merge(m, src)
}
func (m *MsgSubmitProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProof proto.InternalMessageInfo

func (m *MsgSubmitProof) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitProof) GetProofSystem() string {
	if m != nil {
		return m.ProofSystem
	}
	return ""
}

func (m *MsgSubmitProof) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *MsgSubmitProof) GetPublicInput() []byte {
	if m != nil {
		return m.PublicInput
	}
	return nil
}

func (m *MsgSubmitProof) GetVk() []byte {
	if m != nil {
		return m.Vk
	}
	return nil
}

func (m *MsgSubmitProof) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// MsgSubmitProofResponse defines the response structure for executing MsgSubmitProof
type MsgSubmitProofResponse struct {
}

func (m *MsgSubmitProofResponse) Reset()         { *m = MsgSubmitProofResponse{} }
func (m *MsgSubmitProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofResponse) ProtoMessage()    {}
func (*MsgSubmitProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{3}
}
func (m *MsgSubmitProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofResponse.Merge(m, src)
}
func (m *MsgSubmitProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofResponse proto.InternalMessageInfo

// MsgSendTaskResponse defines the response structure for executing MsgSendTask
type MsgSendTaskResponse struct {
}

func (m *MsgSendTaskResponse) Reset()         { *m = MsgSendTaskResponse{} }
func (m *MsgSendTaskResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendTaskResponse) ProtoMessage()    {}
func (*MsgSendTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{4}
}
func (m *MsgSendTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendTaskResponse.Merge(m, src)
}
func (m *MsgSendTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendTaskResponse proto.InternalMessageInfo

// MsgSubmitCommunityVerification is the proof verify community verification request type.
type MsgSubmitCommunityVerification struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ProofId      string `protobuf:"bytes,2,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	VerifyResult bool   `protobuf:"varint,3,opt,name=verify_result,json=verifyResult,proto3" json:"verify_result,omitempty"`
}

func (m *MsgSubmitCommunityVerification) Reset()         { *m = MsgSubmitCommunityVerification{} }
func (m *MsgSubmitCommunityVerification) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitCommunityVerification) ProtoMessage()    {}
func (*MsgSubmitCommunityVerification) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{5}
}
func (m *MsgSubmitCommunityVerification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitCommunityVerification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitCommunityVerification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitCommunityVerification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitCommunityVerification.Merge(m, src)
}
func (m *MsgSubmitCommunityVerification) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitCommunityVerification) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitCommunityVerification.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitCommunityVerification proto.InternalMessageInfo

func (m *MsgSubmitCommunityVerification) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitCommunityVerification) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *MsgSubmitCommunityVerification) GetVerifyResult() bool {
	if m != nil {
		return m.VerifyResult
	}
	return false
}

// MsgSubmitCommunityVerificationResponse defines the response structure for executing MsgSubmitCommunityVerification
type MsgSubmitCommunityVerificationResponse struct {
}

func (m *MsgSubmitCommunityVerificationResponse) Reset() {
	*m = MsgSubmitCommunityVerificationResponse{}
}
func (m *MsgSubmitCommunityVerificationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitCommunityVerificationResponse) ProtoMessage()    {}
func (*MsgSubmitCommunityVerificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{6}
}
func (m *MsgSubmitCommunityVerificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitCommunityVerificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitCommunityVerificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitCommunityVerificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitCommunityVerificationResponse.Merge(m, src)
}
func (m *MsgSubmitCommunityVerificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitCommunityVerificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitCommunityVerificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitCommunityVerificationResponse proto.InternalMessageInfo

// MsgUpdateDASubmitter is the request type for updating the DA submitter address.
type MsgUpdateDASubmitter struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DaSubmitter string `protobuf:"bytes,2,opt,name=da_submitter,json=daSubmitter,proto3" json:"da_submitter,omitempty"`
}

func (m *MsgUpdateDASubmitter) Reset()         { *m = MsgUpdateDASubmitter{} }
func (m *MsgUpdateDASubmitter) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDASubmitter) ProtoMessage()    {}
func (*MsgUpdateDASubmitter) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{7}
}
func (m *MsgUpdateDASubmitter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDASubmitter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDASubmitter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDASubmitter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDASubmitter.Merge(m, src)
}
func (m *MsgUpdateDASubmitter) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDASubmitter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDASubmitter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDASubmitter proto.InternalMessageInfo

func (m *MsgUpdateDASubmitter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDASubmitter) GetDaSubmitter() string {
	if m != nil {
		return m.DaSubmitter
	}
	return ""
}

// MsgUpdateDASubmitterResponse defines the response structure for executing MsgUpdateDASubmitter
type MsgUpdateDASubmitterResponse struct {
}

func (m *MsgUpdateDASubmitterResponse) Reset()         { *m = MsgUpdateDASubmitterResponse{} }
func (m *MsgUpdateDASubmitterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDASubmitterResponse) ProtoMessage()    {}
func (*MsgUpdateDASubmitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{8}
}
func (m *MsgUpdateDASubmitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDASubmitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDASubmitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDASubmitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDASubmitterResponse.Merge(m, src)
}
func (m *MsgUpdateDASubmitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDASubmitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDASubmitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDASubmitterResponse proto.InternalMessageInfo

// MsgUpdateDASubmissions is the request type for updating the DA submission result.
type MsgUpdateDASubmissionResults struct {
	Creator            string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DaSubmissionResult []*DASubmissionResult `protobuf:"bytes,2,rep,name=da_submission_result,json=daSubmissionResult,proto3" json:"da_submission_result,omitempty"`
}

func (m *MsgUpdateDASubmissionResults) Reset()         { *m = MsgUpdateDASubmissionResults{} }
func (m *MsgUpdateDASubmissionResults) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDASubmissionResults) ProtoMessage()    {}
func (*MsgUpdateDASubmissionResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{9}
}
func (m *MsgUpdateDASubmissionResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDASubmissionResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDASubmissionResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDASubmissionResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDASubmissionResults.Merge(m, src)
}
func (m *MsgUpdateDASubmissionResults) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDASubmissionResults) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDASubmissionResults.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDASubmissionResults proto.InternalMessageInfo

func (m *MsgUpdateDASubmissionResults) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateDASubmissionResults) GetDaSubmissionResult() []*DASubmissionResult {
	if m != nil {
		return m.DaSubmissionResult
	}
	return nil
}

// MsgUpdateDASubmissionResultsResponse defines the response structure for executing MsgUpdateDASubmissionResults
type MsgUpdateDASubmissionResultsResponse struct {
}

func (m *MsgUpdateDASubmissionResultsResponse) Reset()         { *m = MsgUpdateDASubmissionResultsResponse{} }
func (m *MsgUpdateDASubmissionResultsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDASubmissionResultsResponse) ProtoMessage()    {}
func (*MsgUpdateDASubmissionResultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_50c44901a6219663, []int{10}
}
func (m *MsgUpdateDASubmissionResultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDASubmissionResultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDASubmissionResultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDASubmissionResultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDASubmissionResultsResponse.Merge(m, src)
}
func (m *MsgUpdateDASubmissionResultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDASubmissionResultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDASubmissionResultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDASubmissionResultsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "fiamma.zkpverify.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "fiamma.zkpverify.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgSubmitProof)(nil), "fiamma.zkpverify.MsgSubmitProof")
	proto.RegisterType((*MsgSubmitProofResponse)(nil), "fiamma.zkpverify.MsgSubmitProofResponse")
	proto.RegisterType((*MsgSendTaskResponse)(nil), "fiamma.zkpverify.MsgSendTaskResponse")
	proto.RegisterType((*MsgSubmitCommunityVerification)(nil), "fiamma.zkpverify.MsgSubmitCommunityVerification")
	proto.RegisterType((*MsgSubmitCommunityVerificationResponse)(nil), "fiamma.zkpverify.MsgSubmitCommunityVerificationResponse")
	proto.RegisterType((*MsgUpdateDASubmitter)(nil), "fiamma.zkpverify.MsgUpdateDASubmitter")
	proto.RegisterType((*MsgUpdateDASubmitterResponse)(nil), "fiamma.zkpverify.MsgUpdateDASubmitterResponse")
	proto.RegisterType((*MsgUpdateDASubmissionResults)(nil), "fiamma.zkpverify.MsgUpdateDASubmissionResults")
	proto.RegisterType((*MsgUpdateDASubmissionResultsResponse)(nil), "fiamma.zkpverify.MsgUpdateDASubmissionResultsResponse")
}

func init() { proto.RegisterFile("fiamma/zkpverify/tx.proto", fileDescriptor_50c44901a6219663) }

var fileDescriptor_50c44901a6219663 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xbf, 0x6f, 0xd3, 0x4c,
	0x18, 0xce, 0xa5, 0x3f, 0xf3, 0x26, 0x5f, 0xbf, 0xaf, 0xfe, 0x02, 0x75, 0x4c, 0x31, 0x69, 0xa8,
	0xaa, 0x50, 0x89, 0x04, 0x82, 0xa8, 0x50, 0x99, 0x5a, 0x58, 0x3a, 0x54, 0xaa, 0x5c, 0xa8, 0x04,
	0x42, 0x8a, 0xae, 0xb1, 0x6b, 0xac, 0xd4, 0x3e, 0xcb, 0x77, 0x8e, 0x1a, 0x26, 0x04, 0x0b, 0x30,
	0xf1, 0x17, 0x30, 0x33, 0x76, 0x60, 0x65, 0x41, 0x0c, 0x1d, 0x2b, 0x26, 0x26, 0x84, 0xda, 0xa1,
	0xff, 0x06, 0xf2, 0x9d, 0xed, 0xa6, 0x76, 0x70, 0xdb, 0x25, 0xf1, 0xfb, 0xbc, 0xcf, 0x73, 0xef,
	0xf3, 0xbe, 0x77, 0x67, 0x43, 0x65, 0xc7, 0xc2, 0xb6, 0x8d, 0x9b, 0xaf, 0xba, 0x6e, 0xcf, 0xf0,
	0xac, 0x9d, 0x7e, 0x93, 0xed, 0x35, 0x5c, 0x8f, 0x30, 0x22, 0xfd, 0x27, 0x52, 0x8d, 0x38, 0xa5,
	0x4c, 0x63, 0xdb, 0x72, 0x48, 0x93, 0xff, 0x0a, 0x92, 0x32, 0xd3, 0x21, 0xd4, 0x26, 0xb4, 0x69,
	0x53, 0xb3, 0xd9, 0xbb, 0x1b, 0xfc, 0x85, 0x89, 0x8a, 0x48, 0xb4, 0x79, 0xd4, 0x14, 0x41, 0x98,
	0x2a, 0x9b, 0xc4, 0x24, 0x02, 0x0f, 0x9e, 0x42, 0xf4, 0x7a, 0xca, 0x89, 0x8b, 0x3d, 0x6c, 0x47,
	0xa2, 0x6a, 0x2a, 0x1d, 0x3f, 0x09, 0x46, 0xed, 0x2b, 0x82, 0x7f, 0xd7, 0xa9, 0xf9, 0xd4, 0xd5,
	0x31, 0x33, 0x36, 0xb8, 0x56, 0x5a, 0x82, 0x02, 0xf6, 0xd9, 0x4b, 0xe2, 0x59, 0xac, 0x2f, 0xa3,
	0x2a, 0xaa, 0x17, 0x56, 0xe5, 0x1f, 0x5f, 0x6e, 0x97, 0x43, 0x3f, 0x2b, 0xba, 0xee, 0x19, 0x94,
	0x6e, 0x32, 0xcf, 0x72, 0x4c, 0xed, 0x94, 0x2a, 0x3d, 0x84, 0x71, 0x51, 0x5d, 0xce, 0x57, 0x51,
	0xbd, 0xd8, 0x92, 0x1b, 0xc9, 0x61, 0x34, 0x44, 0x85, 0xd5, 0xc2, 0xc1, 0xaf, 0x1b, 0xb9, 0xcf,
	0x27, 0xfb, 0x8b, 0x48, 0x0b, 0x25, 0xcb, 0xf7, 0xdf, 0x9c, 0xec, 0x2f, 0x9e, 0x2e, 0xf6, 0xe1,
	0x64, 0x7f, 0xb1, 0x16, 0xba, 0xdf, 0x1b, 0xf0, 0x9f, 0xf0, 0x5a, 0xab, 0xc0, 0x4c, 0x02, 0xd2,
	0x0c, 0xea, 0x12, 0x87, 0x1a, 0xb5, 0x6f, 0x08, 0xa6, 0xd6, 0xa9, 0xb9, 0xe9, 0x6f, 0xdb, 0x16,
	0xdb, 0xf0, 0x08, 0xd9, 0x91, 0x64, 0x98, 0xe8, 0x78, 0x06, 0x66, 0xc4, 0x13, 0x7d, 0x69, 0x51,
	0x28, 0xcd, 0x41, 0xc9, 0x0d, 0x28, 0x6d, 0xda, 0xa7, 0xcc, 0xb0, 0x79, 0x07, 0x05, 0xad, 0xc8,
	0xb1, 0x4d, 0x0e, 0x49, 0x65, 0x18, 0xe3, 0xa1, 0x3c, 0x52, 0x45, 0xf5, 0x92, 0x26, 0x02, 0x2e,
	0xf4, 0xb7, 0x77, 0xad, 0x4e, 0xdb, 0x72, 0x5c, 0x9f, 0xc9, 0xa3, 0x3c, 0x59, 0x14, 0xd8, 0x5a,
	0x00, 0x49, 0x53, 0x90, 0xef, 0x75, 0xe5, 0x31, 0x9e, 0xc8, 0xf7, 0xba, 0xd2, 0x2c, 0x14, 0x1c,
	0x6c, 0x1b, 0xd4, 0xc5, 0x1d, 0x43, 0x1e, 0xe7, 0x85, 0x4e, 0x81, 0xe5, 0x52, 0x30, 0x88, 0xc8,
	0x57, 0x4d, 0x86, 0xab, 0x67, 0x7b, 0x88, 0xdb, 0xbb, 0x02, 0xff, 0x07, 0x19, 0xc3, 0xd1, 0x9f,
	0x60, 0xda, 0x8d, 0xe1, 0x77, 0x08, 0xd4, 0x58, 0xf1, 0x88, 0xd8, 0xb6, 0xef, 0x58, 0xac, 0xbf,
	0x15, 0x4c, 0xcf, 0xea, 0x60, 0x66, 0x11, 0x27, 0x63, 0x0a, 0x15, 0x98, 0x14, 0x53, 0xb0, 0xf4,
	0x70, 0x02, 0x13, 0x3c, 0x5e, 0xd3, 0xa5, 0x9b, 0xf0, 0x8f, 0xd8, 0x82, 0xb6, 0x67, 0x50, 0x7f,
	0x97, 0xf1, 0x29, 0x4c, 0x6a, 0x25, 0x01, 0x6a, 0x1c, 0x4b, 0x78, 0xaf, 0xc3, 0x42, 0xb6, 0x93,
	0xd8, 0x34, 0x86, 0x72, 0xbc, 0x8b, 0x8f, 0x57, 0x84, 0x82, 0x19, 0x5e, 0xf6, 0x7e, 0xe9, 0xb8,
	0x4d, 0x23, 0x66, 0xb4, 0x5f, 0x3a, 0x8e, 0xc5, 0x09, 0x33, 0x2a, 0xcc, 0x0e, 0x2b, 0x11, 0x5b,
	0xf8, 0x84, 0xd2, 0x04, 0x4a, 0x85, 0x49, 0x7f, 0x97, 0xd1, 0x0c, 0x2f, 0x5b, 0x50, 0x8e, 0xbc,
	0x70, 0x45, 0x34, 0xa1, 0x7c, 0x75, 0xa4, 0x5e, 0x6c, 0xcd, 0xa7, 0x6f, 0x41, 0x7a, 0x79, 0x4d,
	0x0a, 0x9d, 0x0f, 0x60, 0x89, 0x06, 0x16, 0x60, 0x3e, 0xcb, 0x5f, 0xd4, 0x48, 0xeb, 0xfb, 0x28,
	0x8c, 0xac, 0x53, 0x53, 0x7a, 0x01, 0xa5, 0x33, 0xb7, 0x7a, 0x2e, 0xed, 0x23, 0x71, 0x73, 0x94,
	0x5b, 0xe7, 0x52, 0xa2, 0x2a, 0xd2, 0x33, 0x28, 0x0e, 0x5e, 0xac, 0xea, 0x50, 0xe5, 0x00, 0x43,
	0xa9, 0x9f, 0xc7, 0x88, 0x97, 0x7e, 0x8f, 0xe0, 0x5a, 0xd6, 0xf1, 0xbd, 0x93, 0xb1, 0xd2, 0x50,
	0x85, 0xf2, 0xe0, 0xb2, 0x8a, 0xd8, 0x4b, 0x17, 0xa6, 0xd3, 0xa7, 0x72, 0x21, 0x63, 0x4c, 0x03,
	0x3c, 0xa5, 0x71, 0x31, 0x5e, 0x5c, 0xec, 0x2d, 0x82, 0xca, 0xdf, 0xcf, 0xdf, 0x05, 0x56, 0x1b,
	0xe4, 0x2b, 0x4b, 0x97, 0xe3, 0x47, 0x2e, 0x94, 0xb1, 0xd7, 0xc1, 0x7b, 0x79, 0xb5, 0x75, 0x70,
	0xa4, 0xa2, 0xc3, 0x23, 0x15, 0xfd, 0x3e, 0x52, 0xd1, 0xc7, 0x63, 0x35, 0x77, 0x78, 0xac, 0xe6,
	0x7e, 0x1e, 0xab, 0xb9, 0xe7, 0xf2, 0x90, 0xd7, 0x32, 0xeb, 0xbb, 0x06, 0xdd, 0x1e, 0xe7, 0xdf,
	0x94, 0x7b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x67, 0x38, 0x10, 0xe9, 0x20, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// SubmitProof defines a (zkpverify) operation for verifying a proof.
	SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error)
	// SubmitCommunityVerification defines a community (zkpverify) operation for verifying a proof.
	SubmitCommunityVerification(ctx context.Context, in *MsgSubmitCommunityVerification, opts ...grpc.CallOption) (*MsgSubmitCommunityVerificationResponse, error)
	// UpdateDASubmitter defines a (zkpverify) operation for updating the DA submitter address.
	UpdateDASubmitter(ctx context.Context, in *MsgUpdateDASubmitter, opts ...grpc.CallOption) (*MsgUpdateDASubmitterResponse, error)
	// UpdateDASubmissionResults defines a (zkpverify) operation for updating the DA submission result.
	UpdateDASubmissionResults(ctx context.Context, in *MsgUpdateDASubmissionResults, opts ...grpc.CallOption) (*MsgUpdateDASubmissionResultsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error) {
	out := new(MsgSubmitProofResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Msg/SubmitProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitCommunityVerification(ctx context.Context, in *MsgSubmitCommunityVerification, opts ...grpc.CallOption) (*MsgSubmitCommunityVerificationResponse, error) {
	out := new(MsgSubmitCommunityVerificationResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Msg/SubmitCommunityVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDASubmitter(ctx context.Context, in *MsgUpdateDASubmitter, opts ...grpc.CallOption) (*MsgUpdateDASubmitterResponse, error) {
	out := new(MsgUpdateDASubmitterResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Msg/UpdateDASubmitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDASubmissionResults(ctx context.Context, in *MsgUpdateDASubmissionResults, opts ...grpc.CallOption) (*MsgUpdateDASubmissionResultsResponse, error) {
	out := new(MsgUpdateDASubmissionResultsResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Msg/UpdateDASubmissionResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// SubmitProof defines a (zkpverify) operation for verifying a proof.
	SubmitProof(context.Context, *MsgSubmitProof) (*MsgSubmitProofResponse, error)
	// SubmitCommunityVerification defines a community (zkpverify) operation for verifying a proof.
	SubmitCommunityVerification(context.Context, *MsgSubmitCommunityVerification) (*MsgSubmitCommunityVerificationResponse, error)
	// UpdateDASubmitter defines a (zkpverify) operation for updating the DA submitter address.
	UpdateDASubmitter(context.Context, *MsgUpdateDASubmitter) (*MsgUpdateDASubmitterResponse, error)
	// UpdateDASubmissionResults defines a (zkpverify) operation for updating the DA submission result.
	UpdateDASubmissionResults(context.Context, *MsgUpdateDASubmissionResults) (*MsgUpdateDASubmissionResultsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) SubmitProof(ctx context.Context, req *MsgSubmitProof) (*MsgSubmitProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProof not implemented")
}
func (*UnimplementedMsgServer) SubmitCommunityVerification(ctx context.Context, req *MsgSubmitCommunityVerification) (*MsgSubmitCommunityVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCommunityVerification not implemented")
}
func (*UnimplementedMsgServer) UpdateDASubmitter(ctx context.Context, req *MsgUpdateDASubmitter) (*MsgUpdateDASubmitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDASubmitter not implemented")
}
func (*UnimplementedMsgServer) UpdateDASubmissionResults(ctx context.Context, req *MsgUpdateDASubmissionResults) (*MsgUpdateDASubmissionResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDASubmissionResults not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Msg/SubmitProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProof(ctx, req.(*MsgSubmitProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitCommunityVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitCommunityVerification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitCommunityVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Msg/SubmitCommunityVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitCommunityVerification(ctx, req.(*MsgSubmitCommunityVerification))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDASubmitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDASubmitter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDASubmitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Msg/UpdateDASubmitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDASubmitter(ctx, req.(*MsgUpdateDASubmitter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDASubmissionResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDASubmissionResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDASubmissionResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Msg/UpdateDASubmissionResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDASubmissionResults(ctx, req.(*MsgUpdateDASubmissionResults))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fiamma.zkpverify.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SubmitProof",
			Handler:    _Msg_SubmitProof_Handler,
		},
		{
			MethodName: "SubmitCommunityVerification",
			Handler:    _Msg_SubmitCommunityVerification_Handler,
		},
		{
			MethodName: "UpdateDASubmitter",
			Handler:    _Msg_UpdateDASubmitter_Handler,
		},
		{
			MethodName: "UpdateDASubmissionResults",
			Handler:    _Msg_UpdateDASubmissionResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fiamma/zkpverify/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Vk) > 0 {
		i -= len(m.Vk)
		copy(dAtA[i:], m.Vk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Vk)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicInput) > 0 {
		i -= len(m.PublicInput)
		copy(dAtA[i:], m.PublicInput)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicInput)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProofSystem) > 0 {
		i -= len(m.ProofSystem)
		copy(dAtA[i:], m.ProofSystem)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofSystem)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitCommunityVerification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitCommunityVerification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitCommunityVerification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyResult {
		i--
		if m.VerifyResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitCommunityVerificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitCommunityVerificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitCommunityVerificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDASubmitter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDASubmitter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDASubmitter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DaSubmitter) > 0 {
		i -= len(m.DaSubmitter)
		copy(dAtA[i:], m.DaSubmitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DaSubmitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDASubmitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDASubmitterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDASubmitterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDASubmissionResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDASubmissionResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDASubmissionResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DaSubmissionResult) > 0 {
		for iNdEx := len(m.DaSubmissionResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DaSubmissionResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDASubmissionResultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDASubmissionResultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDASubmissionResultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofSystem)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PublicInput)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Vk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitCommunityVerification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VerifyResult {
		n += 2
	}
	return n
}

func (m *MsgSubmitCommunityVerificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDASubmitter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DaSubmitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDASubmitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDASubmissionResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DaSubmissionResult) > 0 {
		for _, e := range m.DaSubmissionResult {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateDASubmissionResultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofSystem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInput = append(m.PublicInput[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicInput == nil {
				m.PublicInput = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vk = append(m.Vk[:0], dAtA[iNdEx:postIndex]...)
			if m.Vk == nil {
				m.Vk = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitCommunityVerification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitCommunityVerification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitCommunityVerification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyResult = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitCommunityVerificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitCommunityVerificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitCommunityVerificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDASubmitter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDASubmitter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDASubmitter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaSubmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaSubmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDASubmitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDASubmitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDASubmitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDASubmissionResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDASubmissionResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDASubmissionResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaSubmissionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaSubmissionResult = append(m.DaSubmissionResult, &DASubmissionResult{})
			if err := m.DaSubmissionResult[len(m.DaSubmissionResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDASubmissionResultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDASubmissionResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDASubmissionResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
