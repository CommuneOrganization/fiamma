// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fiamma/zkpverify/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryPendingProofRequest is request type for the Query/PendingProof RPC
// method.
type QueryPendingProofRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingProofRequest) Reset()         { *m = QueryPendingProofRequest{} }
func (m *QueryPendingProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingProofRequest) ProtoMessage()    {}
func (*QueryPendingProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{2}
}
func (m *QueryPendingProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingProofRequest.Merge(m, src)
}
func (m *QueryPendingProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingProofRequest proto.InternalMessageInfo

func (m *QueryPendingProofRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingProofResponse is response type for the Query/PendingProof RPC
// method.
type QueryPendingProofResponse struct {
	PendingProofs []*VerifyResult     `protobuf:"bytes,1,rep,name=pending_proofs,json=pendingProofs,proto3" json:"pending_proofs,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingProofResponse) Reset()         { *m = QueryPendingProofResponse{} }
func (m *QueryPendingProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingProofResponse) ProtoMessage()    {}
func (*QueryPendingProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{3}
}
func (m *QueryPendingProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingProofResponse.Merge(m, src)
}
func (m *QueryPendingProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingProofResponse proto.InternalMessageInfo

func (m *QueryPendingProofResponse) GetPendingProofs() []*VerifyResult {
	if m != nil {
		return m.PendingProofs
	}
	return nil
}

func (m *QueryPendingProofResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryProofDataRequest is request type for the Query/ProofData RPC
// method.
type QueryProofDataRequest struct {
	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
}

func (m *QueryProofDataRequest) Reset()         { *m = QueryProofDataRequest{} }
func (m *QueryProofDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProofDataRequest) ProtoMessage()    {}
func (*QueryProofDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{4}
}
func (m *QueryProofDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofDataRequest.Merge(m, src)
}
func (m *QueryProofDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofDataRequest proto.InternalMessageInfo

func (m *QueryProofDataRequest) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

// QueryProofDataResponse is response type for the Query/ProofData RPC
// method.
type QueryProofDataResponse struct {
	ProofData *ProofData `protobuf:"bytes,1,opt,name=proof_data,json=proofData,proto3" json:"proof_data,omitempty"`
}

func (m *QueryProofDataResponse) Reset()         { *m = QueryProofDataResponse{} }
func (m *QueryProofDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProofDataResponse) ProtoMessage()    {}
func (*QueryProofDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{5}
}
func (m *QueryProofDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProofDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProofDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProofDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProofDataResponse.Merge(m, src)
}
func (m *QueryProofDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProofDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProofDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProofDataResponse proto.InternalMessageInfo

func (m *QueryProofDataResponse) GetProofData() *ProofData {
	if m != nil {
		return m.ProofData
	}
	return nil
}

// QueryVerifyResultRequest is request type for the Query Proof verify result RPC
type QueryVerifyResultRequest struct {
	ProofId string `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
}

func (m *QueryVerifyResultRequest) Reset()         { *m = QueryVerifyResultRequest{} }
func (m *QueryVerifyResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResultRequest) ProtoMessage()    {}
func (*QueryVerifyResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{6}
}
func (m *QueryVerifyResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResultRequest.Merge(m, src)
}
func (m *QueryVerifyResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResultRequest proto.InternalMessageInfo

func (m *QueryVerifyResultRequest) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

// QueryVerifyResultResponse is response type for the Query Proof verify result RPC
type QueryVerifyResultResponse struct {
	VerifyResult *VerifyResult `protobuf:"bytes,1,opt,name=verify_result,json=verifyResult,proto3" json:"verify_result,omitempty"`
}

func (m *QueryVerifyResultResponse) Reset()         { *m = QueryVerifyResultResponse{} }
func (m *QueryVerifyResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResultResponse) ProtoMessage()    {}
func (*QueryVerifyResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{7}
}
func (m *QueryVerifyResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResultResponse.Merge(m, src)
}
func (m *QueryVerifyResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResultResponse proto.InternalMessageInfo

func (m *QueryVerifyResultResponse) GetVerifyResult() *VerifyResult {
	if m != nil {
		return m.VerifyResult
	}
	return nil
}

// QueryVerifyResultsByNamespaceRequest is the request type for the Query/VerifyResultsByNamespace RPC method.
type QueryVerifyResultsByNamespaceRequest struct {
	Namespace  string             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerifyResultsByNamespaceRequest) Reset()         { *m = QueryVerifyResultsByNamespaceRequest{} }
func (m *QueryVerifyResultsByNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResultsByNamespaceRequest) ProtoMessage()    {}
func (*QueryVerifyResultsByNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{8}
}
func (m *QueryVerifyResultsByNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResultsByNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResultsByNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResultsByNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResultsByNamespaceRequest.Merge(m, src)
}
func (m *QueryVerifyResultsByNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResultsByNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResultsByNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResultsByNamespaceRequest proto.InternalMessageInfo

func (m *QueryVerifyResultsByNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *QueryVerifyResultsByNamespaceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerifyResultsByNamespaceResponse is the response type for the Query/VerifyResultsByNamespace RPC method.
type QueryVerifyResultsByNamespaceResponse struct {
	VerifyResults []*VerifyResult     `protobuf:"bytes,1,rep,name=verify_results,json=verifyResults,proto3" json:"verify_results,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerifyResultsByNamespaceResponse) Reset()         { *m = QueryVerifyResultsByNamespaceResponse{} }
func (m *QueryVerifyResultsByNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResultsByNamespaceResponse) ProtoMessage()    {}
func (*QueryVerifyResultsByNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{9}
}
func (m *QueryVerifyResultsByNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResultsByNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResultsByNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResultsByNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResultsByNamespaceResponse.Merge(m, src)
}
func (m *QueryVerifyResultsByNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResultsByNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResultsByNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResultsByNamespaceResponse proto.InternalMessageInfo

func (m *QueryVerifyResultsByNamespaceResponse) GetVerifyResults() []*VerifyResult {
	if m != nil {
		return m.VerifyResults
	}
	return nil
}

func (m *QueryVerifyResultsByNamespaceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingProofByNamespaceRequest is request type for the Query/PendingProofByNamespace RPC method.
type QueryPendingProofByNamespaceRequest struct {
	Namespace  string             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingProofByNamespaceRequest) Reset()         { *m = QueryPendingProofByNamespaceRequest{} }
func (m *QueryPendingProofByNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingProofByNamespaceRequest) ProtoMessage()    {}
func (*QueryPendingProofByNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{10}
}
func (m *QueryPendingProofByNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingProofByNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingProofByNamespaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingProofByNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingProofByNamespaceRequest.Merge(m, src)
}
func (m *QueryPendingProofByNamespaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingProofByNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingProofByNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingProofByNamespaceRequest proto.InternalMessageInfo

func (m *QueryPendingProofByNamespaceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *QueryPendingProofByNamespaceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPendingProofByNamespaceResponse is response type for the Query/PendingProofByNamespace RPC method.
type QueryPendingProofByNamespaceResponse struct {
	PendingProofs []*VerifyResult     `protobuf:"bytes,1,rep,name=pending_proofs,json=pendingProofs,proto3" json:"pending_proofs,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingProofByNamespaceResponse) Reset()         { *m = QueryPendingProofByNamespaceResponse{} }
func (m *QueryPendingProofByNamespaceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingProofByNamespaceResponse) ProtoMessage()    {}
func (*QueryPendingProofByNamespaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{11}
}
func (m *QueryPendingProofByNamespaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingProofByNamespaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingProofByNamespaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingProofByNamespaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingProofByNamespaceResponse.Merge(m, src)
}
func (m *QueryPendingProofByNamespaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingProofByNamespaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingProofByNamespaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingProofByNamespaceResponse proto.InternalMessageInfo

func (m *QueryPendingProofByNamespaceResponse) GetPendingProofs() []*VerifyResult {
	if m != nil {
		return m.PendingProofs
	}
	return nil
}

func (m *QueryPendingProofByNamespaceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDASubmitterRequest is request type for the Query/DASubmitter RPC method.
type QueryDASubmitterRequest struct {
}

func (m *QueryDASubmitterRequest) Reset()         { *m = QueryDASubmitterRequest{} }
func (m *QueryDASubmitterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDASubmitterRequest) ProtoMessage()    {}
func (*QueryDASubmitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{12}
}
func (m *QueryDASubmitterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDASubmitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDASubmitterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDASubmitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDASubmitterRequest.Merge(m, src)
}
func (m *QueryDASubmitterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDASubmitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDASubmitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDASubmitterRequest proto.InternalMessageInfo

// QueryDASubmitterResponse is response type for the Query/DASubmitter RPC method.
type QueryDASubmitterResponse struct {
	DaSubmitter string `protobuf:"bytes,1,opt,name=da_submitter,json=daSubmitter,proto3" json:"da_submitter,omitempty"`
}

func (m *QueryDASubmitterResponse) Reset()         { *m = QueryDASubmitterResponse{} }
func (m *QueryDASubmitterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDASubmitterResponse) ProtoMessage()    {}
func (*QueryDASubmitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{13}
}
func (m *QueryDASubmitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDASubmitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDASubmitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDASubmitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDASubmitterResponse.Merge(m, src)
}
func (m *QueryDASubmitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDASubmitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDASubmitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDASubmitterResponse proto.InternalMessageInfo

func (m *QueryDASubmitterResponse) GetDaSubmitter() string {
	if m != nil {
		return m.DaSubmitter
	}
	return ""
}

// QueryDASubmissionQueueRequest is request type for the Query/DASubmissionQueue RPC method.
type QueryDASubmissionQueueRequest struct {
}

func (m *QueryDASubmissionQueueRequest) Reset()         { *m = QueryDASubmissionQueueRequest{} }
func (m *QueryDASubmissionQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDASubmissionQueueRequest) ProtoMessage()    {}
func (*QueryDASubmissionQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{14}
}
func (m *QueryDASubmissionQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDASubmissionQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDASubmissionQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDASubmissionQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDASubmissionQueueRequest.Merge(m, src)
}
func (m *QueryDASubmissionQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDASubmissionQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDASubmissionQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDASubmissionQueueRequest proto.InternalMessageInfo

// QueryDASubmissionQueueResponse is response type for the Query/DASubmissionQueue RPC method.
type QueryDASubmissionQueueResponse struct {
	DaSubmissionData []*DASubmissionData `protobuf:"bytes,1,rep,name=da_submission_data,json=daSubmissionData,proto3" json:"da_submission_data,omitempty"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDASubmissionQueueResponse) Reset()         { *m = QueryDASubmissionQueueResponse{} }
func (m *QueryDASubmissionQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDASubmissionQueueResponse) ProtoMessage()    {}
func (*QueryDASubmissionQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199742facae61583, []int{15}
}
func (m *QueryDASubmissionQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDASubmissionQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDASubmissionQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDASubmissionQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDASubmissionQueueResponse.Merge(m, src)
}
func (m *QueryDASubmissionQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDASubmissionQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDASubmissionQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDASubmissionQueueResponse proto.InternalMessageInfo

func (m *QueryDASubmissionQueueResponse) GetDaSubmissionData() []*DASubmissionData {
	if m != nil {
		return m.DaSubmissionData
	}
	return nil
}

func (m *QueryDASubmissionQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fiamma.zkpverify.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fiamma.zkpverify.QueryParamsResponse")
	proto.RegisterType((*QueryPendingProofRequest)(nil), "fiamma.zkpverify.QueryPendingProofRequest")
	proto.RegisterType((*QueryPendingProofResponse)(nil), "fiamma.zkpverify.QueryPendingProofResponse")
	proto.RegisterType((*QueryProofDataRequest)(nil), "fiamma.zkpverify.QueryProofDataRequest")
	proto.RegisterType((*QueryProofDataResponse)(nil), "fiamma.zkpverify.QueryProofDataResponse")
	proto.RegisterType((*QueryVerifyResultRequest)(nil), "fiamma.zkpverify.QueryVerifyResultRequest")
	proto.RegisterType((*QueryVerifyResultResponse)(nil), "fiamma.zkpverify.QueryVerifyResultResponse")
	proto.RegisterType((*QueryVerifyResultsByNamespaceRequest)(nil), "fiamma.zkpverify.QueryVerifyResultsByNamespaceRequest")
	proto.RegisterType((*QueryVerifyResultsByNamespaceResponse)(nil), "fiamma.zkpverify.QueryVerifyResultsByNamespaceResponse")
	proto.RegisterType((*QueryPendingProofByNamespaceRequest)(nil), "fiamma.zkpverify.QueryPendingProofByNamespaceRequest")
	proto.RegisterType((*QueryPendingProofByNamespaceResponse)(nil), "fiamma.zkpverify.QueryPendingProofByNamespaceResponse")
	proto.RegisterType((*QueryDASubmitterRequest)(nil), "fiamma.zkpverify.QueryDASubmitterRequest")
	proto.RegisterType((*QueryDASubmitterResponse)(nil), "fiamma.zkpverify.QueryDASubmitterResponse")
	proto.RegisterType((*QueryDASubmissionQueueRequest)(nil), "fiamma.zkpverify.QueryDASubmissionQueueRequest")
	proto.RegisterType((*QueryDASubmissionQueueResponse)(nil), "fiamma.zkpverify.QueryDASubmissionQueueResponse")
}

func init() { proto.RegisterFile("fiamma/zkpverify/query.proto", fileDescriptor_199742facae61583) }

var fileDescriptor_199742facae61583 = []byte{
	// 895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xc7, 0x75, 0x2e, 0xea, 0x56, 0x4f, 0x72, 0x61, 0x5f, 0xdd, 0x5a, 0x66, 0x6d, 0x5a, 0xa6,
	0x2d, 0x4b, 0x95, 0x6b, 0xb2, 0x56, 0x6b, 0x17, 0x68, 0xd1, 0xa1, 0xae, 0xdb, 0xa2, 0x4b, 0x21,
	0xab, 0x45, 0x87, 0x2e, 0xea, 0xc9, 0x3a, 0x13, 0x44, 0x2d, 0x92, 0x16, 0x29, 0x37, 0xca, 0x98,
	0x29, 0x40, 0x3c, 0x18, 0x48, 0xfe, 0x85, 0x00, 0x01, 0xb2, 0x64, 0x4a, 0x86, 0x00, 0x19, 0x32,
	0x79, 0x34, 0x90, 0x25, 0x53, 0x10, 0xd8, 0x01, 0xb2, 0xe7, 0x2f, 0x08, 0x78, 0x77, 0x94, 0x48,
	0x91, 0x8c, 0xe4, 0xc0, 0x40, 0xb2, 0x24, 0xd4, 0xdd, 0xfb, 0xf1, 0x79, 0x5f, 0x3e, 0xbe, 0x67,
	0x98, 0xdb, 0x33, 0x48, 0xab, 0x45, 0xb4, 0xab, 0xff, 0xd9, 0x87, 0xb4, 0x6d, 0xec, 0x75, 0xb5,
	0x83, 0x0e, 0x6d, 0x77, 0x55, 0xbb, 0x6d, 0xb9, 0x16, 0x9e, 0xe4, 0xb7, 0x6a, 0xef, 0x56, 0x9a,
	0x22, 0x2d, 0xc3, 0xb4, 0x34, 0xf6, 0x2f, 0x37, 0x92, 0xa6, 0x75, 0x4b, 0xb7, 0xd8, 0xa3, 0xe6,
	0x3d, 0x89, 0xd3, 0x39, 0xdd, 0xb2, 0xf4, 0x7d, 0xaa, 0x11, 0xdb, 0xd0, 0x88, 0x69, 0x5a, 0x2e,
	0x71, 0x0d, 0xcb, 0x74, 0xc4, 0x6d, 0x79, 0xd7, 0x72, 0x5a, 0x96, 0xa3, 0x35, 0x88, 0x43, 0x79,
	0x46, 0xed, 0x70, 0xbd, 0x41, 0x5d, 0xb2, 0xae, 0xd9, 0x44, 0x37, 0x4c, 0x66, 0x2c, 0x6c, 0xe7,
	0x23, 0x88, 0x36, 0x69, 0x93, 0x96, 0x1f, 0x2a, 0x1f, 0xb9, 0xee, 0x3d, 0x71, 0x0b, 0x65, 0x1a,
	0xf0, 0x8e, 0x97, 0xa2, 0xca, 0xdc, 0x6a, 0xf4, 0xa0, 0x43, 0x1d, 0x57, 0xa9, 0xc1, 0xa7, 0xa1,
	0x53, 0xc7, 0xb6, 0x4c, 0x87, 0xe2, 0x1f, 0x60, 0x9c, 0x87, 0xcf, 0xa1, 0x3c, 0x2a, 0x65, 0x2a,
	0x39, 0x75, 0x50, 0x03, 0x95, 0x7b, 0x6c, 0xa5, 0x4f, 0x9e, 0x2d, 0xa4, 0xee, 0xbc, 0xbc, 0x57,
	0x46, 0x35, 0xe1, 0xa2, 0x34, 0x20, 0xc7, 0x63, 0x52, 0xb3, 0x69, 0x98, 0x7a, 0xb5, 0x6d, 0x59,
	0x7b, 0x22, 0x1f, 0xfe, 0x15, 0xa0, 0x5f, 0x9a, 0x08, 0xbe, 0xa2, 0x72, 0x1d, 0x54, 0x4f, 0x07,
	0x95, 0x2b, 0x2f, 0x74, 0x50, 0xab, 0x44, 0xa7, 0xc2, 0xb7, 0x16, 0xf0, 0x54, 0xee, 0x22, 0x98,
	0x8d, 0x49, 0x22, 0xf0, 0x7f, 0x81, 0x4f, 0x6c, 0x7e, 0x5e, 0xb7, 0xbd, 0x0b, 0xaf, 0x8c, 0x0f,
	0x4a, 0x99, 0x8a, 0x1c, 0x2d, 0xe3, 0x6f, 0xf6, 0x5f, 0x8d, 0x3a, 0x9d, 0x7d, 0xb7, 0x36, 0x61,
	0x07, 0xa2, 0x39, 0xf8, 0xb7, 0x10, 0xec, 0x18, 0x83, 0x2d, 0x0e, 0x85, 0xe5, 0x0c, 0x21, 0xda,
	0x0a, 0x7c, 0xc6, 0x61, 0xbd, 0xb8, 0xdb, 0xc4, 0x25, 0xbe, 0x1c, 0xb3, 0xf0, 0x31, 0x03, 0xac,
	0x1b, 0x4d, 0x26, 0x46, 0xba, 0xf6, 0x11, 0xfb, 0xfd, 0x7b, 0x53, 0xf9, 0x0b, 0x3e, 0x1f, 0xf4,
	0x11, 0xd5, 0x7d, 0x0f, 0xc0, 0x9d, 0x9a, 0xc4, 0x25, 0x42, 0xc3, 0x2f, 0x62, 0x5e, 0x50, 0xcf,
	0x31, 0x6d, 0xfb, 0x8f, 0xca, 0x86, 0x78, 0x37, 0xa1, 0xb2, 0x87, 0xc3, 0xfc, 0x2b, 0xd4, 0x0e,
	0xbb, 0x09, 0x9e, 0x9f, 0x61, 0x82, 0xa7, 0xac, 0xb7, 0xd9, 0x85, 0x40, 0x1a, 0x26, 0x76, 0xf6,
	0x30, 0xf0, 0x4b, 0x39, 0x42, 0xb0, 0x1c, 0x49, 0xe1, 0x6c, 0x75, 0xff, 0x20, 0x2d, 0xea, 0xd8,
	0x64, 0xd7, 0xef, 0x02, 0x3c, 0x07, 0x69, 0xd3, 0x3f, 0x13, 0x98, 0xfd, 0x83, 0x81, 0xfe, 0x1a,
	0x7b, 0xeb, 0xfe, 0x7a, 0x80, 0xa0, 0x30, 0x04, 0xa7, 0xdf, 0x6b, 0xa1, 0xea, 0x47, 0xee, 0xb5,
	0x60, 0xf9, 0x97, 0xd8, 0x6b, 0x37, 0x10, 0x2c, 0x45, 0xbe, 0x8c, 0x77, 0xa6, 0xe3, 0x7d, 0xff,
	0xb5, 0x26, 0xd2, 0xbc, 0xa7, 0x9f, 0xec, 0x2c, 0xcc, 0x30, 0xee, 0xed, 0x9f, 0xfe, 0xec, 0x34,
	0x5a, 0x86, 0xeb, 0xd2, 0xb6, 0x3f, 0x33, 0x7f, 0x14, 0xdf, 0x50, 0xe8, 0x4a, 0x94, 0xb1, 0x08,
	0xd9, 0x26, 0xa9, 0x3b, 0xfe, 0xb9, 0x10, 0x36, 0xd3, 0x24, 0x3d, 0x53, 0x65, 0x01, 0xe6, 0x83,
	0xee, 0x8e, 0x63, 0x58, 0xe6, 0x4e, 0x87, 0x76, 0x7c, 0xfd, 0x94, 0x87, 0x08, 0xe4, 0x24, 0x0b,
	0x91, 0xa6, 0x0a, 0xd8, 0x4f, 0xc3, 0x6e, 0xfd, 0x51, 0xe0, 0x29, 0xa6, 0x44, 0x15, 0x0b, 0x06,
	0x62, 0x13, 0x61, 0x52, 0x00, 0xf5, 0x4e, 0x2e, 0x4d, 0xb8, 0xca, 0xab, 0x34, 0x7c, 0xc8, 0xe8,
	0xf1, 0xff, 0x30, 0xce, 0x97, 0x04, 0x5e, 0x8e, 0x22, 0x45, 0x77, 0x91, 0x54, 0x18, 0x62, 0xc5,
	0x93, 0x29, 0xf9, 0x6b, 0x4f, 0x5e, 0xdc, 0x1c, 0x93, 0x70, 0x4e, 0x4b, 0x58, 0x89, 0xf8, 0x18,
	0x41, 0x36, 0xd8, 0x6f, 0xb8, 0x9c, 0x14, 0x39, 0xba, 0xa1, 0xa4, 0xd5, 0x91, 0x6c, 0x05, 0x4b,
	0x91, 0xb1, 0x2c, 0xe2, 0x85, 0x18, 0x96, 0x60, 0x37, 0xe3, 0xeb, 0x08, 0xd2, 0xbd, 0x81, 0x8c,
	0x8b, 0x49, 0x39, 0x06, 0xf6, 0x83, 0x54, 0x1a, 0x6e, 0x28, 0x48, 0x4a, 0x8c, 0x44, 0xc1, 0xf9,
	0x28, 0x89, 0x4e, 0xdd, 0x7a, 0x7f, 0x61, 0xe0, 0x5b, 0x08, 0xb2, 0xc1, 0x4f, 0x28, 0x51, 0x9d,
	0x98, 0x1d, 0x91, 0xa8, 0x4e, 0xdc, 0x62, 0x50, 0x56, 0x19, 0x53, 0x01, 0x2f, 0xc5, 0x33, 0x85,
	0xc6, 0x26, 0x7e, 0x8c, 0x20, 0x97, 0x34, 0x6c, 0xf1, 0xe6, 0x08, 0x69, 0x63, 0x96, 0x85, 0xf4,
	0xdd, 0x85, 0xfd, 0x04, 0xfa, 0x06, 0x43, 0xd7, 0xf0, 0x5a, 0x14, 0x3d, 0x3c, 0xed, 0xeb, 0x8d,
	0x6e, 0xbd, 0x3f, 0x36, 0x1f, 0x21, 0x98, 0x49, 0x98, 0x74, 0x78, 0x63, 0x84, 0xc6, 0x8a, 0x29,
	0x61, 0xf3, 0xa2, 0x6e, 0xa2, 0x82, 0x6f, 0x59, 0x05, 0x2a, 0xfe, 0x6a, 0x48, 0x6b, 0x86, 0x0b,
	0x38, 0x42, 0x90, 0x09, 0xcc, 0x35, 0xfc, 0x65, 0x42, 0xf6, 0xe8, 0x58, 0x94, 0xca, 0xa3, 0x98,
	0x0a, 0xb8, 0x15, 0x06, 0x97, 0xc7, 0x72, 0x14, 0x2e, 0x38, 0x3e, 0xf1, 0x6d, 0x04, 0x53, 0x91,
	0x29, 0x88, 0xb5, 0x37, 0x67, 0x8a, 0x4c, 0x54, 0xe9, 0xeb, 0xd1, 0x1d, 0x04, 0xe0, 0x1a, 0x03,
	0x2c, 0xe2, 0x42, 0x32, 0x20, 0x1f, 0xbc, 0x07, 0x9e, 0xdb, 0x56, 0xe5, 0xe4, 0x4c, 0x46, 0xa7,
	0x67, 0x32, 0x7a, 0x7e, 0x26, 0xa3, 0xe3, 0x73, 0x39, 0x75, 0x7a, 0x2e, 0xa7, 0x9e, 0x9e, 0xcb,
	0xa9, 0x7f, 0x72, 0xc2, 0xff, 0x4a, 0x20, 0x82, 0xdb, 0xb5, 0xa9, 0xd3, 0x18, 0x67, 0x7f, 0x97,
	0x7f, 0xf3, 0x3a, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x53, 0xa0, 0x39, 0x7d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PendingProof items.
	PendingProof(ctx context.Context, in *QueryPendingProofRequest, opts ...grpc.CallOption) (*QueryPendingProofResponse, error)
	// Queries proof data by proof id
	ProofData(ctx context.Context, in *QueryProofDataRequest, opts ...grpc.CallOption) (*QueryProofDataResponse, error)
	VerifyResult(ctx context.Context, in *QueryVerifyResultRequest, opts ...grpc.CallOption) (*QueryVerifyResultResponse, error)
	// Queries a list of VerifyResult items by namespace.
	VerifyResultsByNamespace(ctx context.Context, in *QueryVerifyResultsByNamespaceRequest, opts ...grpc.CallOption) (*QueryVerifyResultsByNamespaceResponse, error)
	// Queries a list of PendingProofByNamespace items.
	PendingProofByNamespace(ctx context.Context, in *QueryPendingProofByNamespaceRequest, opts ...grpc.CallOption) (*QueryPendingProofByNamespaceResponse, error)
	DASubmitter(ctx context.Context, in *QueryDASubmitterRequest, opts ...grpc.CallOption) (*QueryDASubmitterResponse, error)
	DASubmissionQueue(ctx context.Context, in *QueryDASubmissionQueueRequest, opts ...grpc.CallOption) (*QueryDASubmissionQueueResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingProof(ctx context.Context, in *QueryPendingProofRequest, opts ...grpc.CallOption) (*QueryPendingProofResponse, error) {
	out := new(QueryPendingProofResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/PendingProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProofData(ctx context.Context, in *QueryProofDataRequest, opts ...grpc.CallOption) (*QueryProofDataResponse, error) {
	out := new(QueryProofDataResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/ProofData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyResult(ctx context.Context, in *QueryVerifyResultRequest, opts ...grpc.CallOption) (*QueryVerifyResultResponse, error) {
	out := new(QueryVerifyResultResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/VerifyResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyResultsByNamespace(ctx context.Context, in *QueryVerifyResultsByNamespaceRequest, opts ...grpc.CallOption) (*QueryVerifyResultsByNamespaceResponse, error) {
	out := new(QueryVerifyResultsByNamespaceResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/VerifyResultsByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingProofByNamespace(ctx context.Context, in *QueryPendingProofByNamespaceRequest, opts ...grpc.CallOption) (*QueryPendingProofByNamespaceResponse, error) {
	out := new(QueryPendingProofByNamespaceResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/PendingProofByNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DASubmitter(ctx context.Context, in *QueryDASubmitterRequest, opts ...grpc.CallOption) (*QueryDASubmitterResponse, error) {
	out := new(QueryDASubmitterResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/DASubmitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DASubmissionQueue(ctx context.Context, in *QueryDASubmissionQueueRequest, opts ...grpc.CallOption) (*QueryDASubmissionQueueResponse, error) {
	out := new(QueryDASubmissionQueueResponse)
	err := c.cc.Invoke(ctx, "/fiamma.zkpverify.Query/DASubmissionQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PendingProof items.
	PendingProof(context.Context, *QueryPendingProofRequest) (*QueryPendingProofResponse, error)
	// Queries proof data by proof id
	ProofData(context.Context, *QueryProofDataRequest) (*QueryProofDataResponse, error)
	VerifyResult(context.Context, *QueryVerifyResultRequest) (*QueryVerifyResultResponse, error)
	// Queries a list of VerifyResult items by namespace.
	VerifyResultsByNamespace(context.Context, *QueryVerifyResultsByNamespaceRequest) (*QueryVerifyResultsByNamespaceResponse, error)
	// Queries a list of PendingProofByNamespace items.
	PendingProofByNamespace(context.Context, *QueryPendingProofByNamespaceRequest) (*QueryPendingProofByNamespaceResponse, error)
	DASubmitter(context.Context, *QueryDASubmitterRequest) (*QueryDASubmitterResponse, error)
	DASubmissionQueue(context.Context, *QueryDASubmissionQueueRequest) (*QueryDASubmissionQueueResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PendingProof(ctx context.Context, req *QueryPendingProofRequest) (*QueryPendingProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingProof not implemented")
}
func (*UnimplementedQueryServer) ProofData(ctx context.Context, req *QueryProofDataRequest) (*QueryProofDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofData not implemented")
}
func (*UnimplementedQueryServer) VerifyResult(ctx context.Context, req *QueryVerifyResultRequest) (*QueryVerifyResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyResult not implemented")
}
func (*UnimplementedQueryServer) VerifyResultsByNamespace(ctx context.Context, req *QueryVerifyResultsByNamespaceRequest) (*QueryVerifyResultsByNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyResultsByNamespace not implemented")
}
func (*UnimplementedQueryServer) PendingProofByNamespace(ctx context.Context, req *QueryPendingProofByNamespaceRequest) (*QueryPendingProofByNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingProofByNamespace not implemented")
}
func (*UnimplementedQueryServer) DASubmitter(ctx context.Context, req *QueryDASubmitterRequest) (*QueryDASubmitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DASubmitter not implemented")
}
func (*UnimplementedQueryServer) DASubmissionQueue(ctx context.Context, req *QueryDASubmissionQueueRequest) (*QueryDASubmissionQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DASubmissionQueue not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/PendingProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingProof(ctx, req.(*QueryPendingProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProofData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProofDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProofData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/ProofData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProofData(ctx, req.(*QueryProofDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/VerifyResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyResult(ctx, req.(*QueryVerifyResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyResultsByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyResultsByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyResultsByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/VerifyResultsByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyResultsByNamespace(ctx, req.(*QueryVerifyResultsByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingProofByNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingProofByNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingProofByNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/PendingProofByNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingProofByNamespace(ctx, req.(*QueryPendingProofByNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DASubmitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDASubmitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DASubmitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/DASubmitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DASubmitter(ctx, req.(*QueryDASubmitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DASubmissionQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDASubmissionQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DASubmissionQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiamma.zkpverify.Query/DASubmissionQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DASubmissionQueue(ctx, req.(*QueryDASubmissionQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fiamma.zkpverify.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PendingProof",
			Handler:    _Query_PendingProof_Handler,
		},
		{
			MethodName: "ProofData",
			Handler:    _Query_ProofData_Handler,
		},
		{
			MethodName: "VerifyResult",
			Handler:    _Query_VerifyResult_Handler,
		},
		{
			MethodName: "VerifyResultsByNamespace",
			Handler:    _Query_VerifyResultsByNamespace_Handler,
		},
		{
			MethodName: "PendingProofByNamespace",
			Handler:    _Query_PendingProofByNamespace_Handler,
		},
		{
			MethodName: "DASubmitter",
			Handler:    _Query_DASubmitter_Handler,
		},
		{
			MethodName: "DASubmissionQueue",
			Handler:    _Query_DASubmissionQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fiamma/zkpverify/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPendingProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingProofs) > 0 {
		for iNdEx := len(m.PendingProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProofDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProofDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProofDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProofData != nil {
		{
			size, err := m.ProofData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyResult != nil {
		{
			size, err := m.VerifyResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResultsByNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResultsByNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResultsByNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResultsByNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResultsByNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResultsByNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifyResults) > 0 {
		for iNdEx := len(m.VerifyResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerifyResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingProofByNamespaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingProofByNamespaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingProofByNamespaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingProofByNamespaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingProofByNamespaceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingProofByNamespaceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingProofs) > 0 {
		for iNdEx := len(m.PendingProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDASubmitterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDASubmitterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDASubmitterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDASubmitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDASubmitterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDASubmitterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DaSubmitter) > 0 {
		i -= len(m.DaSubmitter)
		copy(dAtA[i:], m.DaSubmitter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DaSubmitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDASubmissionQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDASubmissionQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDASubmissionQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDASubmissionQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDASubmissionQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDASubmissionQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DaSubmissionData) > 0 {
		for iNdEx := len(m.DaSubmissionData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DaSubmissionData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPendingProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingProofs) > 0 {
		for _, e := range m.PendingProofs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProofDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProofDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofData != nil {
		l = m.ProofData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifyResult != nil {
		l = m.VerifyResult.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResultsByNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResultsByNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VerifyResults) > 0 {
		for _, e := range m.VerifyResults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingProofByNamespaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingProofByNamespaceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingProofs) > 0 {
		for _, e := range m.PendingProofs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDASubmitterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDASubmitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DaSubmitter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDASubmissionQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDASubmissionQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DaSubmissionData) > 0 {
		for _, e := range m.DaSubmissionData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingProofs = append(m.PendingProofs, &VerifyResult{})
			if err := m.PendingProofs[len(m.PendingProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProofDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProofDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProofDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofData == nil {
				m.ProofData = &ProofData{}
			}
			if err := m.ProofData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyResult == nil {
				m.VerifyResult = &VerifyResult{}
			}
			if err := m.VerifyResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResultsByNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResultsByNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResultsByNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResultsByNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResultsByNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResultsByNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyResults = append(m.VerifyResults, &VerifyResult{})
			if err := m.VerifyResults[len(m.VerifyResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingProofByNamespaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingProofByNamespaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingProofByNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingProofByNamespaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingProofByNamespaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingProofByNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingProofs = append(m.PendingProofs, &VerifyResult{})
			if err := m.PendingProofs[len(m.PendingProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDASubmitterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDASubmitterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDASubmitterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDASubmitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDASubmitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDASubmitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaSubmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaSubmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDASubmissionQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDASubmissionQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDASubmissionQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDASubmissionQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDASubmissionQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDASubmissionQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaSubmissionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaSubmissionData = append(m.DaSubmissionData, &DASubmissionData{})
			if err := m.DaSubmissionData[len(m.DaSubmissionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
