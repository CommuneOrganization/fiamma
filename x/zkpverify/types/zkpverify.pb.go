// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fiamma/zkpverify/zkpverify.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VerificationStatus is the verification status enum for the proof verification
type VerificationStatus int32

const (
	VerificationStatus_INITIAL_VALIDATION    VerificationStatus = 0
	VerificationStatus_COMMUNITY_VALIDATION  VerificationStatus = 1
	VerificationStatus_DEFINITIVE_VALIDATION VerificationStatus = 2
)

var VerificationStatus_name = map[int32]string{
	0: "INITIAL_VALIDATION",
	1: "COMMUNITY_VALIDATION",
	2: "DEFINITIVE_VALIDATION",
}

var VerificationStatus_value = map[string]int32{
	"INITIAL_VALIDATION":    0,
	"COMMUNITY_VALIDATION":  1,
	"DEFINITIVE_VALIDATION": 2,
}

func (x VerificationStatus) String() string {
	return proto.EnumName(VerificationStatus_name, int32(x))
}

func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{0}
}

// DataLocation is the proof data location enum for the proof verification
type DataLocation int32

const (
	DataLocation_FIAMMA  DataLocation = 0
	DataLocation_NUBITDA DataLocation = 1
	DataLocation_AVAILDA DataLocation = 2
)

var DataLocation_name = map[int32]string{
	0: "FIAMMA",
	1: "NUBITDA",
	2: "AVAILDA",
}

var DataLocation_value = map[string]int32{
	"FIAMMA":  0,
	"NUBITDA": 1,
	"AVAILDA": 2,
}

func (x DataLocation) String() string {
	return proto.EnumName(DataLocation_name, int32(x))
}

func (DataLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{1}
}

// ProofSystem is the proof system enum for the proof verification
type ProofSystem int32

const (
	ProofSystem_GROTH16_BN254_BITVM ProofSystem = 0
	ProofSystem_PLONK_BN254         ProofSystem = 1
	ProofSystem_PLONK_BLS12_381     ProofSystem = 2
	ProofSystem_GROTH16_BN254       ProofSystem = 3
	ProofSystem_SP1                 ProofSystem = 4
)

var ProofSystem_name = map[int32]string{
	0: "GROTH16_BN254_BITVM",
	1: "PLONK_BN254",
	2: "PLONK_BLS12_381",
	3: "GROTH16_BN254",
	4: "SP1",
}

var ProofSystem_value = map[string]int32{
	"GROTH16_BN254_BITVM": 0,
	"PLONK_BN254":         1,
	"PLONK_BLS12_381":     2,
	"GROTH16_BN254":       3,
	"SP1":                 4,
}

func (x ProofSystem) String() string {
	return proto.EnumName(ProofSystem_name, int32(x))
}

func (ProofSystem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{2}
}

// ProofData is the data structure for the proof verification request
type ProofData struct {
	ProofSystem ProofSystem `protobuf:"varint,1,opt,name=proof_system,json=proofSystem,proto3,enum=fiamma.zkpverify.ProofSystem" json:"proof_system,omitempty"`
	Proof       []byte      `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	PublicInput []byte      `protobuf:"bytes,3,opt,name=public_input,json=publicInput,proto3" json:"public_input,omitempty"`
	Vk          []byte      `protobuf:"bytes,4,opt,name=vk,proto3" json:"vk,omitempty"`
}

func (m *ProofData) Reset()         { *m = ProofData{} }
func (m *ProofData) String() string { return proto.CompactTextString(m) }
func (*ProofData) ProtoMessage()    {}
func (*ProofData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{0}
}
func (m *ProofData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofData.Merge(m, src)
}
func (m *ProofData) XXX_Size() int {
	return m.Size()
}
func (m *ProofData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofData.DiscardUnknown(m)
}

var xxx_messageInfo_ProofData proto.InternalMessageInfo

func (m *ProofData) GetProofSystem() ProofSystem {
	if m != nil {
		return m.ProofSystem
	}
	return ProofSystem_GROTH16_BN254_BITVM
}

func (m *ProofData) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *ProofData) GetPublicInput() []byte {
	if m != nil {
		return m.PublicInput
	}
	return nil
}

func (m *ProofData) GetVk() []byte {
	if m != nil {
		return m.Vk
	}
	return nil
}

// VerifyResult is the data structure for the proof verification result
type VerifyResult struct {
	ProofId                    string             `protobuf:"bytes,1,opt,name=proof_id,json=proofId,proto3" json:"proof_id,omitempty"`
	ProofSystem                ProofSystem        `protobuf:"varint,2,opt,name=proof_system,json=proofSystem,proto3,enum=fiamma.zkpverify.ProofSystem" json:"proof_system,omitempty"`
	DataCommitment             string             `protobuf:"bytes,3,opt,name=data_commitment,json=dataCommitment,proto3" json:"data_commitment,omitempty"`
	DataLocation               DataLocation       `protobuf:"varint,4,opt,name=data_location,json=dataLocation,proto3,enum=fiamma.zkpverify.DataLocation" json:"data_location,omitempty"`
	Result                     bool               `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
	Status                     VerificationStatus `protobuf:"varint,6,opt,name=status,proto3,enum=fiamma.zkpverify.VerificationStatus" json:"status,omitempty"`
	CommunityVerificationCount uint64             `protobuf:"varint,7,opt,name=community_verification_count,json=communityVerificationCount,proto3" json:"community_verification_count,omitempty"`
}

func (m *VerifyResult) Reset()         { *m = VerifyResult{} }
func (m *VerifyResult) String() string { return proto.CompactTextString(m) }
func (*VerifyResult) ProtoMessage()    {}
func (*VerifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{1}
}
func (m *VerifyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyResult.Merge(m, src)
}
func (m *VerifyResult) XXX_Size() int {
	return m.Size()
}
func (m *VerifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyResult proto.InternalMessageInfo

func (m *VerifyResult) GetProofId() string {
	if m != nil {
		return m.ProofId
	}
	return ""
}

func (m *VerifyResult) GetProofSystem() ProofSystem {
	if m != nil {
		return m.ProofSystem
	}
	return ProofSystem_GROTH16_BN254_BITVM
}

func (m *VerifyResult) GetDataCommitment() string {
	if m != nil {
		return m.DataCommitment
	}
	return ""
}

func (m *VerifyResult) GetDataLocation() DataLocation {
	if m != nil {
		return m.DataLocation
	}
	return DataLocation_FIAMMA
}

func (m *VerifyResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *VerifyResult) GetStatus() VerificationStatus {
	if m != nil {
		return m.Status
	}
	return VerificationStatus_INITIAL_VALIDATION
}

func (m *VerifyResult) GetCommunityVerificationCount() uint64 {
	if m != nil {
		return m.CommunityVerificationCount
	}
	return 0
}

type BitVMChallengeData struct {
	VerifyResult bool   `protobuf:"varint,1,opt,name=verify_result,json=verifyResult,proto3" json:"verify_result,omitempty"`
	Witness      []byte `protobuf:"bytes,2,opt,name=witness,proto3" json:"witness,omitempty"`
	Vk           []byte `protobuf:"bytes,3,opt,name=vk,proto3" json:"vk,omitempty"`
	PublicInput  []byte `protobuf:"bytes,4,opt,name=public_input,json=publicInput,proto3" json:"public_input,omitempty"`
	Proposer     string `protobuf:"bytes,5,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (m *BitVMChallengeData) Reset()         { *m = BitVMChallengeData{} }
func (m *BitVMChallengeData) String() string { return proto.CompactTextString(m) }
func (*BitVMChallengeData) ProtoMessage()    {}
func (*BitVMChallengeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d31b59671d261aa, []int{2}
}
func (m *BitVMChallengeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitVMChallengeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitVMChallengeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitVMChallengeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitVMChallengeData.Merge(m, src)
}
func (m *BitVMChallengeData) XXX_Size() int {
	return m.Size()
}
func (m *BitVMChallengeData) XXX_DiscardUnknown() {
	xxx_messageInfo_BitVMChallengeData.DiscardUnknown(m)
}

var xxx_messageInfo_BitVMChallengeData proto.InternalMessageInfo

func (m *BitVMChallengeData) GetVerifyResult() bool {
	if m != nil {
		return m.VerifyResult
	}
	return false
}

func (m *BitVMChallengeData) GetWitness() []byte {
	if m != nil {
		return m.Witness
	}
	return nil
}

func (m *BitVMChallengeData) GetVk() []byte {
	if m != nil {
		return m.Vk
	}
	return nil
}

func (m *BitVMChallengeData) GetPublicInput() []byte {
	if m != nil {
		return m.PublicInput
	}
	return nil
}

func (m *BitVMChallengeData) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func init() {
	proto.RegisterEnum("fiamma.zkpverify.VerificationStatus", VerificationStatus_name, VerificationStatus_value)
	proto.RegisterEnum("fiamma.zkpverify.DataLocation", DataLocation_name, DataLocation_value)
	proto.RegisterEnum("fiamma.zkpverify.ProofSystem", ProofSystem_name, ProofSystem_value)
	proto.RegisterType((*ProofData)(nil), "fiamma.zkpverify.ProofData")
	proto.RegisterType((*VerifyResult)(nil), "fiamma.zkpverify.VerifyResult")
	proto.RegisterType((*BitVMChallengeData)(nil), "fiamma.zkpverify.BitVMChallengeData")
}

func init() { proto.RegisterFile("fiamma/zkpverify/zkpverify.proto", fileDescriptor_5d31b59671d261aa) }

var fileDescriptor_5d31b59671d261aa = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x3a, 0x69, 0xd2, 0x4c, 0xdc, 0xd4, 0x6c, 0x4b, 0x71, 0x2b, 0xb0, 0x42, 0x41, 0x22,
	0xea, 0x21, 0x55, 0xd2, 0x82, 0x38, 0x70, 0xa8, 0x93, 0xb4, 0xb0, 0x22, 0x71, 0x2a, 0xc7, 0xb5,
	0x04, 0x17, 0xcb, 0x4d, 0xdc, 0xd6, 0x6a, 0xfc, 0xa3, 0x78, 0x1d, 0x08, 0x4f, 0xc1, 0x89, 0x07,
	0xe0, 0x69, 0x38, 0xf6, 0xc8, 0x11, 0x35, 0x4f, 0xc0, 0x1b, 0x20, 0xaf, 0xdd, 0xd4, 0xe0, 0x13,
	0xb7, 0xfd, 0xbe, 0xf9, 0x66, 0xf6, 0xf3, 0xcc, 0x78, 0xa1, 0x76, 0x61, 0x9b, 0x8e, 0x63, 0xee,
	0x7f, 0xb9, 0xf6, 0x67, 0xd6, 0xd4, 0xbe, 0x98, 0xdf, 0x9f, 0x1a, 0xfe, 0xd4, 0xa3, 0x1e, 0x16,
	0x62, 0x45, 0x63, 0xc9, 0xef, 0x6c, 0x5e, 0x7a, 0x97, 0x1e, 0x0b, 0xee, 0x47, 0xa7, 0x58, 0xb7,
	0xfb, 0x0d, 0x41, 0xf9, 0x74, 0xea, 0x79, 0x17, 0x5d, 0x93, 0x9a, 0xf8, 0x08, 0x78, 0x3f, 0x02,
	0x46, 0x30, 0x0f, 0xa8, 0xe5, 0x88, 0xa8, 0x86, 0xea, 0xd5, 0xd6, 0x93, 0xc6, 0xbf, 0xc5, 0x1a,
	0x2c, 0x65, 0xc8, 0x44, 0x6a, 0xc5, 0xbf, 0x07, 0x78, 0x13, 0x56, 0x18, 0x14, 0xb9, 0x1a, 0xaa,
	0xf3, 0x6a, 0x0c, 0xf0, 0x53, 0xe0, 0xfd, 0xf0, 0x7c, 0x62, 0x8f, 0x0c, 0xdb, 0xf5, 0x43, 0x2a,
	0xe6, 0x59, 0xb0, 0x12, 0x73, 0x24, 0xa2, 0x70, 0x15, 0xb8, 0xd9, 0xb5, 0x58, 0x60, 0x01, 0x6e,
	0x76, 0xbd, 0xfb, 0x9b, 0x03, 0x5e, 0x67, 0x97, 0xa9, 0x56, 0x10, 0x4e, 0x28, 0xde, 0x86, 0xd5,
	0xd8, 0x9b, 0x3d, 0x66, 0xbe, 0xca, 0x6a, 0x89, 0x61, 0x32, 0xce, 0xd8, 0xe6, 0xfe, 0xdb, 0xf6,
	0x0b, 0x58, 0x1f, 0x9b, 0xd4, 0x34, 0x46, 0x9e, 0xe3, 0xd8, 0xd4, 0xb1, 0xdc, 0xd8, 0x63, 0x59,
	0xad, 0x46, 0x74, 0x67, 0xc9, 0xe2, 0x0e, 0xac, 0x31, 0xe1, 0xc4, 0x1b, 0x99, 0xd4, 0xf6, 0x5c,
	0xe6, 0xb8, 0xda, 0x92, 0xb2, 0x77, 0x45, 0x0d, 0xed, 0x25, 0x2a, 0x95, 0x1f, 0xa7, 0x10, 0xde,
	0x82, 0xe2, 0x94, 0x7d, 0x94, 0xb8, 0x52, 0x43, 0xf5, 0x55, 0x35, 0x41, 0xf8, 0x0d, 0x14, 0x03,
	0x6a, 0xd2, 0x30, 0x10, 0x8b, 0xac, 0xea, 0xf3, 0x6c, 0x55, 0xd6, 0x12, 0x3b, 0xae, 0x33, 0x64,
	0x5a, 0x35, 0xc9, 0xc1, 0x47, 0xf0, 0x38, 0xb2, 0x1f, 0xba, 0x36, 0x9d, 0x1b, 0xb3, 0x94, 0xce,
	0x18, 0x79, 0xa1, 0x4b, 0xc5, 0x52, 0x0d, 0xd5, 0x0b, 0xea, 0xce, 0x52, 0x93, 0x2e, 0xd5, 0x89,
	0x14, 0xbb, 0xdf, 0x11, 0xe0, 0xb6, 0x4d, 0xf5, 0x7e, 0xe7, 0xca, 0x9c, 0x4c, 0x2c, 0xf7, 0xd2,
	0x62, 0x5b, 0xf1, 0x0c, 0xd6, 0xe2, 0xdb, 0x8d, 0xc4, 0x35, 0x62, 0xae, 0xf9, 0x59, 0x7a, 0x3c,
	0x22, 0x94, 0x3e, 0xd9, 0xd4, 0xb5, 0x82, 0x20, 0x19, 0xfd, 0x1d, 0x4c, 0x26, 0x9b, 0xbf, 0x9b,
	0x6c, 0x66, 0x19, 0x0a, 0xd9, 0x65, 0xd8, 0x61, 0xb3, 0xf6, 0xbd, 0xc0, 0x9a, 0xb2, 0x16, 0x95,
	0xd5, 0x25, 0xde, 0x33, 0x01, 0x67, 0x9b, 0x80, 0xb7, 0x00, 0x13, 0x85, 0x68, 0x44, 0xee, 0x19,
	0xba, 0xdc, 0x23, 0x5d, 0x59, 0x23, 0x03, 0x45, 0xc8, 0x61, 0x11, 0x36, 0x3b, 0x83, 0x7e, 0xff,
	0x4c, 0x21, 0xda, 0x87, 0x74, 0x04, 0xe1, 0x6d, 0x78, 0xd8, 0x3d, 0x3e, 0x61, 0x49, 0xfa, 0x71,
	0x3a, 0xc4, 0xed, 0x1d, 0x02, 0x9f, 0x9e, 0x1e, 0x06, 0x28, 0x9e, 0x10, 0xb9, 0xdf, 0x97, 0x85,
	0x1c, 0xae, 0x40, 0x49, 0x39, 0x6b, 0x13, 0xad, 0x2b, 0x0b, 0x28, 0x02, 0xb2, 0x2e, 0x93, 0x5e,
	0x57, 0x16, 0xb8, 0xbd, 0x2b, 0xa8, 0xa4, 0xf6, 0x0b, 0x3f, 0x82, 0x8d, 0xb7, 0xea, 0x40, 0x7b,
	0xd7, 0x7c, 0x65, 0xb4, 0x95, 0xd6, 0xcb, 0x43, 0xa3, 0x4d, 0x34, 0xbd, 0x2f, 0xe4, 0xf0, 0x3a,
	0x54, 0x4e, 0x7b, 0x03, 0xe5, 0x7d, 0x4c, 0x0b, 0x08, 0x6f, 0xc0, 0x7a, 0x42, 0xf4, 0x86, 0xcd,
	0x96, 0x71, 0xf0, 0xba, 0x29, 0x70, 0xf8, 0x01, 0xac, 0xfd, 0x95, 0x2e, 0xe4, 0x71, 0x09, 0xf2,
	0xc3, 0xd3, 0xa6, 0x50, 0x68, 0xb7, 0x7e, 0xdc, 0x4a, 0xe8, 0xe6, 0x56, 0x42, 0xbf, 0x6e, 0x25,
	0xf4, 0x75, 0x21, 0xe5, 0x6e, 0x16, 0x52, 0xee, 0xe7, 0x42, 0xca, 0x7d, 0x14, 0x93, 0x87, 0xe1,
	0x73, 0xea, 0x69, 0xa0, 0x73, 0xdf, 0x0a, 0xce, 0x8b, 0xec, 0x7f, 0x3f, 0xf8, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x23, 0x1c, 0x6a, 0x39, 0x3b, 0x04, 0x00, 0x00,
}

func (m *ProofData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vk) > 0 {
		i -= len(m.Vk)
		copy(dAtA[i:], m.Vk)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.Vk)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PublicInput) > 0 {
		i -= len(m.PublicInput)
		copy(dAtA[i:], m.PublicInput)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.PublicInput)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProofSystem != 0 {
		i = encodeVarintZkpverify(dAtA, i, uint64(m.ProofSystem))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommunityVerificationCount != 0 {
		i = encodeVarintZkpverify(dAtA, i, uint64(m.CommunityVerificationCount))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintZkpverify(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.DataLocation != 0 {
		i = encodeVarintZkpverify(dAtA, i, uint64(m.DataLocation))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataCommitment) > 0 {
		i -= len(m.DataCommitment)
		copy(dAtA[i:], m.DataCommitment)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.DataCommitment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ProofSystem != 0 {
		i = encodeVarintZkpverify(dAtA, i, uint64(m.ProofSystem))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProofId) > 0 {
		i -= len(m.ProofId)
		copy(dAtA[i:], m.ProofId)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.ProofId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BitVMChallengeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitVMChallengeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitVMChallengeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PublicInput) > 0 {
		i -= len(m.PublicInput)
		copy(dAtA[i:], m.PublicInput)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.PublicInput)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vk) > 0 {
		i -= len(m.Vk)
		copy(dAtA[i:], m.Vk)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.Vk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Witness) > 0 {
		i -= len(m.Witness)
		copy(dAtA[i:], m.Witness)
		i = encodeVarintZkpverify(dAtA, i, uint64(len(m.Witness)))
		i--
		dAtA[i] = 0x12
	}
	if m.VerifyResult {
		i--
		if m.VerifyResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZkpverify(dAtA []byte, offset int, v uint64) int {
	offset -= sovZkpverify(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProofData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProofSystem != 0 {
		n += 1 + sovZkpverify(uint64(m.ProofSystem))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	l = len(m.PublicInput)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	l = len(m.Vk)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	return n
}

func (m *VerifyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofId)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	if m.ProofSystem != 0 {
		n += 1 + sovZkpverify(uint64(m.ProofSystem))
	}
	l = len(m.DataCommitment)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	if m.DataLocation != 0 {
		n += 1 + sovZkpverify(uint64(m.DataLocation))
	}
	if m.Result {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovZkpverify(uint64(m.Status))
	}
	if m.CommunityVerificationCount != 0 {
		n += 1 + sovZkpverify(uint64(m.CommunityVerificationCount))
	}
	return n
}

func (m *BitVMChallengeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifyResult {
		n += 2
	}
	l = len(m.Witness)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	l = len(m.Vk)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	l = len(m.PublicInput)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovZkpverify(uint64(l))
	}
	return n
}

func sovZkpverify(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZkpverify(x uint64) (n int) {
	return sovZkpverify(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProofData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkpverify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
			}
			m.ProofSystem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofSystem |= ProofSystem(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInput = append(m.PublicInput[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicInput == nil {
				m.PublicInput = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vk = append(m.Vk[:0], dAtA[iNdEx:postIndex]...)
			if m.Vk == nil {
				m.Vk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkpverify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkpverify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkpverify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofSystem", wireType)
			}
			m.ProofSystem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProofSystem |= ProofSystem(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCommitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataCommitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataLocation", wireType)
			}
			m.DataLocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataLocation |= DataLocation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= VerificationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityVerificationCount", wireType)
			}
			m.CommunityVerificationCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommunityVerificationCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZkpverify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkpverify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitVMChallengeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkpverify
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitVMChallengeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitVMChallengeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerifyResult = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = append(m.Witness[:0], dAtA[iNdEx:postIndex]...)
			if m.Witness == nil {
				m.Witness = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vk = append(m.Vk[:0], dAtA[iNdEx:postIndex]...)
			if m.Vk == nil {
				m.Vk = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicInput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicInput = append(m.PublicInput[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicInput == nil {
				m.PublicInput = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkpverify
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkpverify
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkpverify(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkpverify
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZkpverify(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZkpverify
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkpverify
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZkpverify
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZkpverify
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZkpverify
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZkpverify        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZkpverify          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZkpverify = fmt.Errorf("proto: unexpected end of group")
)
